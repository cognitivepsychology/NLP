<?xml version="1.0" encoding="UTF-8"?>
<SJML>
    <header>
        <fileInfo>
            <fileId>WDRW1900100137</fileId>
            <annoLevel>원시</annoLevel>
            <category>비출판물 > 기타 > 전문 개발 프론트엔드의 개발서</category>
        </fileInfo>
        <sourceInfo>
            <title>개발 방법론</title>
            <author id="P00137" age="24" occupation="직장인/전문직" sex="M" submission="온라인" handwriting="No">김치호</author>
        </sourceInfo>
    </header>
    <text date="20200000" subclass="null_개발방법론">
        <p># React-Native 란?</p>
        <p>- 웹 어플리케이션을 개발하는 도구인 React에서 파생되었다.</p>
        <p>- React와 거의 유사한 문법을 활용하여 네이티브 앱을 개발하는 도구.</p>
        <p>- JavaScript를 기반으로 한다.</p>
        <p>## 장점</p>
        <p>### 1. ios와 android를 동일 코드로 동시 개발 가능.</p>
        <p>- 높은 생산성</p>
        <p>- 좋은 가성비</p>
        <p>- 효율적인 유지보수</p>
        <p>### 2. 든든한 개발사와 커뮤니티</p>
        <p>- FaceBook에서 개발</p>
        <p>- 전세계적으로 Flutter와 함께 어플리케이션 공동 개발 라이브러리의 양대산맥으로 많은 유저층을 보유</p>
        <p>- JS자체의 폭발적인 성장</p>
        <p>- 굉장히 빠르고 잦은 업데이트</p>
        <p>&gt;&gt; 본인의 경우에 7월달에 0.59.8로 개발 시작했다가 8월말 0.60.5로 올라와서 개고생하고 10월에 0.61.5여서 또 개고생한 경험이 있음. (0.59 → 0.60 패치의 경우에 Auto Link 기능이 생기면서 대격변 수준으로 패치가 일어남)</p>
        <p>- git이나 Stack Over Flow와 같은 세계적 커뮤니티에서 일어나는 활발한 교류</p>
        <p>## 단점</p>
        <p>### 1.  안정화 되지 않은 버전</p>
        <p>- 아직 1.0 버전이 나오지 않았음. → 안정화 되지 않아서 수시로 업그레이드 중.</p>
        <p>- 버전 업그레이드 현황에 촉각을 곤두세우고 있어야 함.</p>
        <p>ex) 0.60 버전 이전엔 Auto Link 기능이 없어 수동으로 링크를 걸어줘야 했고, 네이티브단을 건드는 기능의 경우에는 네이티브 단도 건들어야 했지만, 0.60 버전 부터는 Auto Link 기능이 추가됨으로써 오픈 소스 라이브러리 기능을 사용할 때 편의성이 증가했다.</p>
        <p>### 2. 네이티브가 아니기 때문에 오는 한계</p>
        <p>- 네이티브에 비해서 perfomance가 약하다.</p>
        <p>- 필요에 따라서는 네이티브단의 기능을 끌어다 써야하는 경우가 있는데 (ex 카카오 로그인과 같은 간편 로그인, map) 쉽지않다. 솔직히 말해서 좆같다.</p>
        <p>&gt;&gt; 경험상 지도(map)의 경우에는 네이티브 기능으로 개발하는 것은 안정성의 문제나 끌어다 쓰기가 어려우므로 비추천. 차라리 웹뷰를 이용해서 개발할 것.</p>
        <p>&gt;&gt; 비슷한 이유에서 결제 기능 역시 네이티브단에서 노는게 아니라 아임포트에서 제공해주는 웹뷰를 활용한 라이브러리 사용이 훨씬 편하고 일반적이다.</p>
        <p># DALY에 React-Native를 사용해 개발한 이유</p>
        <p>1. 최초 개발 멤버(프론트엔드 - &name1&, 백엔드 - &name2&)의 상황에서 프론트엔드 1인으로 어플 개발을 하기 위해서는 Flutter or RN 중 하나를 선택해야 했었으며,</p>
        <p>Flutter - Dart , RN - JS 라는 각 라이브러리 간 언어를 보면 RN이 초반에 더 높은 생산성을 가져올 수 있었으므로 RN으로 낙점.</p>
        <p>2. 1인 개발 체제(어플의 경우에만)로 위와 같은 장점들은 (단점에도 불구하고) 정말 매력적.</p>
        <p>즉, 앞으로의 상황에 따라서 네이티브로 선회하거나 Flutter로 선회하는 등 여러가지 선택지를 앞두고 있다.</p>
        <p>예를 들어 개발인력의 양적 혹은 질적 증가 등.</p>
        <p>다만, 현재로선 RN이 가장 효율적이고 매력적인 선택지이므로 RN을 활용하며, 실력을 증가시키는 게 가장 옳다.</p>
        <p># React-Native로 개발하기.</p>
        <p>본 문서의 작성 이유는 DALY내 모든 개발자들이 같은 개발 방법론을 사용하게 하여 협업을 원활히 하게 하며, 인력 지원 및 교체에 효율적으로 대응하게 하기 위함이다.</p>
        <p>기본적으로 본 방법론은 DALY-Client를 RN초심자 였던 필자가 개발하며 겪어온 상황을 중심으로 서술했으며, 본 문서를 통해 RN에 대한 고차원적인 이해를 하고자 해선 안된다. (고차원 적인 이해가 필요하다면 JS → React 순으로 기본 언어 및 모체 라이브러리부터 공부한 후 MVC2 모델과 같은 개발 모델 역시 공부하길 바란다.)</p>
        <p>본 문서는 초보 개발자 혹은 React 계열에 대해 모르는 개발자가 속성으로 RN 개발에 투입되기 위하여 작성 되었으며, 필자의 개인적인 견해 및 방법론, 가치관이 강하게 투영되어 있으므로 무조건 정답은 아님을 알아야 한다.</p>
        <p>다만, 본 방법론은 위에 서술한 것 처럼 협업과 DALY 개발팀의 고차원적인 효율을 위하여 설계된 것임을 명심하고 본인의 의견과 다르더라도 따라주길 바란다. 만약 본 문서에 이견이 있으면 필자와 상의 후 더 좋은 방법을 찾아서 수정해 나가면 될 것이고, DALY의 이념과 마찬가지로 피드백을 통해 본 개발서를 발전시켜 나가길 바란다.</p>
        <p>이 글을 서술하고 있는 필자 역시 스스로가 완벽하지 않음을 당연하게 알고 있고, 모든 피드백을 받아들이고 열린 생각으로 본 문서를 더 나은 방향으로 발전시키고 싶다.</p>
        <p>by &name1& 2019/12/31</p>
        <p>## 1. RN 시작하기</p>
        <p>- 왜 같은 개발 방법론을 사용해야만 하는가?</p>
        <p>1. 현재의 개발에선 1인 개발체제가 거의 이뤄지기가 힘들다.</p>
        <p>그 이유는 아무리 개발 툴이나 오픈소스 라이브러리가 발전했다고는 하지만, 그만큼 유저와 클라이언트의 눈은 높아졌고, 개발은 세분화 되어 1인 개발체제는 욕구를 충족시켜줄 수 없다.</p>
        <p>당장 현재 2019년 DALY에 투입된 개발인력만 봐도, Project Manager(&name3&, Designer(&name4&), App Developer(&name1&), Server Developer(&name2&) 으로 4인이 투입되었고, 유기적인 협업을 이루지 못하면 효율은 극악으로 떨어지게 된다.</p>
        <p>특히나 필자는 Front-End 역할을 하기에 정확한 기획, 정확한 디자인, 정확한 서버의 Rest API가 나와주지 않으면 수정, 기획 갈아엎기, 코드 뒤집어 엎기 지옥에 빠지게 된다.</p>
        <p>이 부분은 그 특정한 누구의 책임이 아닌, 정확한 협업 시스템을 갖추지 못한 DALY 개발진 전체의 잘못이다. 그렇기 때문에 우리는 정확하고 명료한 방법론을 만들고, 그를 정확히 따르며, 모두가 이를 공유하여 제대로된 협업 체제를 갖춰야만 한다.</p>
        <p>그렇기에 본 개발 방법론은 DALY 내부의 모든 개발진이 공유할 것이며, 특히나 앞으로 모든 RN 개발자들은 모두 각박하다고 생각될 정도로 이 방법론을 정확히 지켜야 할 것이다. (안지키고 나중에 갈아엎고 멘탈 터지느니 좀 귀찮아도 정확하게 지키고 나중에 멘탈 터지지 마라)</p>
        <p>또한 본 개발 방법론은 아주 세세할 정도로 코드를 분할할 것인데, 이는 한 어플에 여러 개발자가 투입 되었을 때 1+1 = 2 이상의 효율을 내기 위함이다. (제대로 된 개발 방법론이 없이 한 어플에 여러 개발자가 투입되면 개지랄난다 진짜)</p>
        <p>2. 인력의 효율적 배치를 위하여</p>
        <p>앞으로 DALY는 주사업인 DALY-Client 와 DALY-Owner 외에도 외주 사업을 진행 할 것이며, 또한 사업의 진행에 따라 다른 어플들 역시 개발해야 할 수 있는데 이때, 여러 어플 개발자들이 효율적으로 인력 재배치가 이뤄지기 위해서는 확실한 개발 방법론이 필요하다.</p>
        <p>- React-Native</p>
        <p>RN으로 개발하는 방법은 후술할 것이며, 현 문단은 RN에 대한 설명(살짝 개인적인 견해)과 함께 시작전에 알아 둬야 할 점들에 대해서 서술한다.</p>
        <p>1. 사전적 의미</p>
        <p>facebook에서 개발한 오픈소스 라이브러리인 React에서 파생된 오픈소스 라이브러리. React는 웹을 개발하기 위한 도구였으며, RN은 앱을 네이티브로 개발하기 위한 도구이다. 이 둘의 구조는 거의 비슷하다. 동작을 좀더 상세히 살펴보면 다르지만, 개발에 있어선 큰 문제가 될만한 부분은 아니다.</p>
        <p>RN은 javascript를 기반으로 만들어졌으며, bridge를 통해 Native API를 호출하여 앱을 동작시킨다. 즉, 네이티브 앱으로 개발이 가능하다. 다만, 분명한 점은 Native 동작에 비해 성능이 떨어지는 건 사실이지만, 복잡한 앱 및 애니메이션 구현이 아니면 체감되지 않는다.</p>
        <p>즉, 개발자가 로직만 잘 구축하면, 성능도 훌륭하고, 생산성에 대한 이점을 얻을 수 있다.</p>
        <p>또한, RN은 한 코드로 ios, android를 동시 개발할 수 있으므로, 높은 가성비를 가져 올 수있으며, Reloading이 굉장히 빨라 생산성 자체가 높다. 단점이라면, 한 컴퓨터가 ios, android를 동시 개발해야 하며, simulator와 amulator를 동시에 구동하려면 높은 사양이 요구된다.(체감상 메모리 16GB는 필요)</p>
        <p>더해서, Android Studio는 저장공간을 많이 차지하며 Xcode를 사용하려면 Mac계열이 필요하다. 개발 환경을 맞추려면 돈이 좀 든다.</p>
        <p>생태계를 보자면, npm기준 154,008명(2019/12/31)이 사용중. javascript의 세계적 강세나 facebook의 뒷배, stackoverflow,git 와 같은 세계적 커뮤니티를 고려해보면 좋은 편이다.</p>
        <p>2. rn의 장단점</p>
        <p>[장점]</p>
        <p>- 높은 생산성</p>
        <p>- 좋은 가성비</p>
        <p>- 비교적 짧은 러닝커브</p>
        <p>- 넓은 생태계</p>
        <p>- 꽤 괜찮은 성능</p>
        <p>- 네이티브를 몰라도 네이티브 앱을 개발 가능</p>
        <p>[단점]</p>
        <p>- 네이티브에 비하면 밀리는 성능</p>
        <p>- 네이티브를 몰라도 네이티브 앱을 개발 가능할 줄 알았는데 실력이 늘면 늘수록 느껴지는 네이티브에 대한 무지에서 오는 한계</p>
        <p>⇒ 결제 기능같은 네이티브 기능 연동 및 개발 시에 강하게 느낄 수 있다.</p>
        <p>- 아직 1.x 버전이 나오지 않은 불안한 안정성</p>
        <p>3. 주의할 점</p>
        <p>- ios와 android가 동시 개발 가능한 것은 맞으며, 넓은 생태계 덕분에 꽤나 괜찮은 오픈소스 라이브러리 들이 많지만, 상황에 따라서 직접 구현해야 할 때 가 있는데 ios와 android가 동시에 같은 코드로 지원안되는 경우가 분명히 있으므로 조심해야 한다.</p>
        <p>- 네이티브 기능을 연동하거나 개발할 때 속된말로 지랄맞다.</p>
        <p>→ 결제기능, 카카오 간편 로그인 연동, 네이티브 지도</p>
        <p>- 네이티브를 몰라도 네이티브 앱을 개발 할 수 있다는 달콤한 말에 현혹 된 후에 실제로 수준이 오를 수록 네이티브를 몰라서 개빡친다.</p>
        <p>→ 결국 네이티브에 대해서 알아야만 한다.</p>
        <p>4. expo init vs react-native init</p>
        <p>엑스포란 react-native를 기반으로 만들어진 일종의 개발 도구다.</p>
        <p>RN개발을 좀더 편하게 도와주기 때문에 초심자가 사용하기에 매우 편하고 좋다. 일단, expo는 초기 설정을 거의 대부분 알아서 해주기 때문에 초기 공수가 매우 적게 들어가며, expo 자체에서 제공하는 API들을 사용하면 수월하게 RN에 입문하는게 가능하다.</p>
        <p>다만, 이와 같은 장점들에 비해 명확하고 치명적인 단점들이 있다.</p>
        <p>- 빌드 파일 크기가 매우매우 크다.</p>
        <p>- 제공되는 api만 이용이 가능하다.(직접 모듈 제작 불가능)</p>
        <p>→ 치명적</p>
        <p>- 블루투스 이용 불가</p>
        <p>- 백그라운드 직접 핸들링 불가능</p>
        <p>- hermes 엔진 등 최신 스펙 이용 불가</p>
        <p>- 매우매우매우매우매우 좁은 생태계</p>
        <p>→ expo로 입문했다 하더라도 실력이 쌓이면 지랄맞은 한계에 두들겨 맞고 모두 expo를 탈출해버린다. 덕분에 남는 사람이 거의 없음.</p>
    </text>
</SJML>